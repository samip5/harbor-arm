name: "Build Package Workflow"
env:
  DOCKER_COMPOSE_VERSION: 1.23.0

on:
  workflow_dispatch:
  push:
    branches:
          - main
          - release-*
  schedule:
    - cron: 0 2 * * *
jobs:
  BUILD_BASE:
    env:
      BUILD_BASE: true
    runs-on: [ "self-hosted", "Linux", "ARM64" ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go 1.20
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
        id: go
        
      - name: Check go version
        run: go version
      - name: setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Build Harbor-ARM Images
        run: |
          set -x
          env
          # the target release version is the version of next release(RC or GA). It needs to be updated on creating new release branch.
          target_release_version=$(cat ./VERSION)-arm
          Harbor_Package_Version=$target_release_version-'build.'$GITHUB_RUN_NUMBER

          if [[ $target_branch == "main" ]]; then
            Harbor_Assets_Version=$Harbor_Package_Version
            harbor_target_bucket=$harbor_builds_bucket
          else
            Harbor_Assets_Version=$target_release_version
            harbor_target_bucket=$harbor_releases_bucket/$target_branch
          fi

          if [[ $target_branch == "release-"* ]]; then
            Harbor_Build_Base_Tag=$target_release_version
          else
            Harbor_Build_Base_Tag=dev-arm
          fi
          make download && sudo make compile_redis && sudo make pre_update
          sudo make compile COMPILETAG=compile_golangimage
          if [ -z "$BUILD_BASE"  ] || [ "$BUILD_BASE" != "true"  ]; then
            echo "Do not need to build base images!"
          else
            build_base_params=" BUILD_BASE=true PUSHBASEIMAGE=true REGISTRYUSER=\"${{ secrets.DOCKER_HUB_USERNAME }}\" REGISTRYPASSWORD=\"${{ secrets.DOCKER_HUB_PASSWORD }}\""
          fi
          sudo make build BASEIMAGETAG=${Harbor_Build_Base_Tag} VERSIONTAG=${Harbor_Assets_Version} PKGVERSIONTAG=${Harbor_Package_Version} BUILDBIN=true NOTARYFLAG=true CHARTFLAG=true TRIVYFLAG=true HTTPPROXY= ${build_base_params}
          #echo -en "${{ secrets.HARBOR_SIGN_KEY }}" |  gpg --import

          publishImage $target_branch $Harbor_Assets_Version "${{ secrets.DOCKER_HUB_USERNAME }}" "${{ secrets.DOCKER_HUB_PASSWORD }}"
  BUILD_PACKAGE:
    env:
        BUILD_PACKAGE: true
    runs-on: ["self-hosted", "Linux", "ARM64"]
    needs:
      - BUILD_BASE
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go 1.20
        uses: actions/setup-go@v1
        with:
          go-version: 1.20
        id: go
      - name: setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Build Harbor-ARM Images
        run: |
          set -x
          env
          # the target release version is the version of next release(RC or GA). It needs to be updated on creating new release branch.
          target_release_version=$(cat ./VERSION)-arm
          Harbor_Package_Version=$target_release_version-'build.'$GITHUB_RUN_NUMBER

          if [[ $target_branch == "main" ]]; then
            Harbor_Assets_Version=$Harbor_Package_Version
            harbor_target_bucket=$harbor_builds_bucket
          else
            Harbor_Assets_Version=$target_release_version
            harbor_target_bucket=$harbor_releases_bucket/$target_branch
          fi

          if [[ $target_branch == "release-"* ]]; then
            Harbor_Build_Base_Tag=$target_release_version
          else
            Harbor_Build_Base_Tag=dev-arm
          fi
          make download && sudo make compile_redis && sudo make pre_update
          sudo make compile COMPILETAG=compile_golangimage
          if [ -z "$BUILD_BASE"  ] || [ "$BUILD_BASE" != "true"  ]; then
            echo "Do not need to build base images!"
          else
            build_base_params=" BUILD_BASE=true PUSHBASEIMAGE=true REGISTRYUSER=\"${{ secrets.DOCKER_HUB_USERNAME }}\" REGISTRYPASSWORD=\"${{ secrets.DOCKER_HUB_PASSWORD }}\""
          fi
          sudo make build BASEIMAGETAG=${Harbor_Build_Base_Tag} VERSIONTAG=${Harbor_Assets_Version} PKGVERSIONTAG=${Harbor_Package_Version} BUILDBIN=true NOTARYFLAG=true CHARTFLAG=true TRIVYFLAG=true HTTPPROXY= ${build_base_params}
          #echo -en "${{ secrets.HARBOR_SIGN_KEY }}" |  gpg --import

          publishImage $target_branch $Harbor_Assets_Version "${{ secrets.DOCKER_HUB_USERNAME }}" "${{ secrets.DOCKER_HUB_PASSWORD }}"
      - name: Build Package
        run: |
          set -x
          env
          df -h
          harbor_target_bucket=""
          target_branch="$(echo ${GITHUB_REF#refs/heads/})"
          harbor_online_build_bundle=""
          harbor_logs_bucket="harbor-ci-logs"
          harbor_builds_bucket="harbor-builds"
          harbor_releases_bucket="harbor-releases"
          harbor_ci_pipeline_store_bucket="harbor-ci-pipeline-store/latest"
          # the target release version is the version of next release(RC or GA). It needs to be updated on creating new release branch.
          target_release_version=$(cat ./VERSION)-arm
          Harbor_Package_Version=$target_release_version-'build.'$GITHUB_RUN_NUMBER

          if [[ $target_branch == "main" ]]; then
            Harbor_Assets_Version=$Harbor_Package_Version
            harbor_target_bucket=$harbor_builds_bucket
          else
            Harbor_Assets_Version=$target_release_version
            harbor_target_bucket=$harbor_releases_bucket/$target_branch
          fi

          if [[ $target_branch == "release-"* ]]; then
            Harbor_Build_Base_Tag=$target_release_version
          else
            Harbor_Build_Base_Tag=dev-arm
          fi

          cd src/github.com/goharbor/harbor-arm
          sudo make package_online GOBUILDTAGS="include_oss include_gcs" BASEIMAGETAG=${Harbor_Build_Base_Tag} VERSIONTAG=${Harbor_Assets_Version} PKGVERSIONTAG=${Harbor_Package_Version} BUILDBIN=true NOTARYFLAG=true TRIVYFLAG=true HTTPPROXY=
          harbor_online_build_bundle=$(basename harbor-online-installer-arm-*.tgz)
          echo "Package name is: $harbor_online_build_bundle"

          #echo -en "${{ secrets.HARBOR_SIGN_KEY }}" |  gpg --import
          #gpg -v -ab -u ${{ secrets.HARBOR_SIGN_KEY_ID }} $harbor_online_build_bundle

          publishImage $target_branch $Harbor_Assets_Version "${{ secrets.DOCKER_HUB_USERNAME }}" "${{ secrets.DOCKER_HUB_PASSWORD }}"

      #- name: Slack Notification
      #  uses: sonots/slack-notice-action@v3
      #  with:
      #    status: ${{ job.status }}
      #    title: Build Package - ${{ env.BUILD_BUNDLE }}
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      #  if: always()
